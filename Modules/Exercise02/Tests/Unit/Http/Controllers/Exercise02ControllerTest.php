<?php

namespace Modules\Exercise02\Tests\Unit\Http\Controllers;

use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Session;
use Modules\Exercise02\Http\Controllers\Exercise02Controller;
use Modules\Exercise02\Http\Requests\ATMRequest;
use Modules\Exercise02\Services\ATMService;
use Tests\TestCase;

class Exercise02ControllerTest extends TestCase
{
    protected $atmServiceMock;
    protected $atmController;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->atmServiceMock = $this->createMock(ATMService::class);
        $this->atmController = new Exercise02Controller($this->atmServiceMock);
    }

    public function test_index()
    {
        $view = $this->atmController->index();

        $this->assertInstanceOf(View::class, $view);
        $this->assertEquals('exercise02::index', $view->name());
        $this->assertArrayHasKey('normalFee', $view->getData());
        $this->assertArrayHasKey('noFee', $view->getData());
        $this->assertArrayHasKey('timePeriod1', $view->getData());
        $this->assertArrayHasKey('timePeriod2', $view->getData());
        $this->assertArrayHasKey('timePeriod3', $view->getData());
    }

    public function test_takeATMFee()
    {
        $atmRequestMock = $this->getMockBuilder(ATMRequest::class)
                                ->onlyMethods(['validated'])
                                ->getMock();

        $atmRequestMock->expects($this->once())
                    ->method('validated')
                    ->willReturn([
                        'card_id' => 1,
                    ]);

        $result = $this->atmController->takeATMFee($atmRequestMock);

        $this->assertTrue(Session::has('calculate'));
        $this->assertArrayHasKey('fee', Session::get('calculate'));
        $this->assertInstanceOf(RedirectResponse::class, $result);
    }
}
